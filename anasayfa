package com.example.resimpaylasmafirebase

import android.content.Intent
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.view.Menu
import android.view.MenuInflater
import android.view.MenuItem
import android.widget.Toast
import com.example.resimpaylasmafirebase.databinding.ActivityAnasayfaBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.Query
import com.google.firebase.firestore.FirebaseFirestore

class anasayfa : AppCompatActivity() {
    private lateinit var binding: ActivityAnasayfaBinding
    private lateinit var auth: FirebaseAuth
    private lateinit var database : FirebaseFirestore
    var postlistesi = ArrayList<post>()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityAnasayfaBinding.inflate(layoutInflater)
        setContentView(binding.root)

        auth= FirebaseAuth.getInstance()
        database = FirebaseFirestore.getInstance()

        verileriAl()



    }

    fun verileriAl(){

        //ilk önce database collection fonksiyonunu yaziyoruz

        database.collection("post").orderBy("tarih",com.google.firebase.firestore.Query.Direction.DESCENDING)
            //burda tarihe göre siralayacak ve en son gönderilen en basda listelenecek
           .addSnapshotListener{ snapshot, exception->

            if (exception != null){
                // bir hata olusmus ise kullaniciya bunu bildiriyoruz

                Toast.makeText(this,exception.localizedMessage,Toast.LENGTH_SHORT).show()
            }else{
                //snapshot null mi degil mi diye kontrol ediyoruz

                if (snapshot != null){
                    //snapshot null olmayabilir ama ici bos olabilir

                    if (snapshot.isEmpty == false){

                        val documents= snapshot.documents
                        //onceden eklenen postlistesini temizliyoruz
                        postlistesi.clear()

                        for (document in documents){
                            val kullaniciMail= document.get("kullaniciEmail") as String
                            val kullaniciYorum= document.get("kullaniciYorum") as String
                            val tarih= document.get("tarih") as String
                            val gorselUrl= document.get("gorselUrl") as String

                            //bunlari bir dizi halinde tutmamiz gerekiyor
                            //her bir veri icin bir arrayList olusturmak yerine bir sinif modeli olusturmak daha mantikli

                            var indirilenPost= post(kullaniciMail,kullaniciYorum,gorselUrl)
                            postlistesi.add(indirilenPost)


                        }

                    }
                }
            }

        }


    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        val menuInflater = getMenuInflater()
        menuInflater.inflate(R.menu.secenekler_menusu,menu)



        return super.onCreateOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {

        if (item.itemId == R.id.resimPaylasItem){
            val intent = Intent(this, resimPaylas::class.java)
            startActivity(intent)


        }else if (item.itemId ==R.id.cikisYapItem){
            auth.signOut()

            val intent= Intent(this, login ::class.java)
            startActivity(intent)
            finish()

        }

        return super.onOptionsItemSelected(item)
    }
}
